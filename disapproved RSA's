/**
*
* Report Disapproved Ads
*
* Creates a report indicating which ads are disapproved, including the reason why
* Sends an alert via email whenever ads are disapproved
*
* Version 2.0
* - changed AWQL query to GAQL query
* - updated the script to be compatible with new script environment
* - added support for policy findings in the Google Ads API
*
* @author: Nils Rooijmans
*
* contact nils@nilsrooijmans.com for questions and the MCC version of the script 
*/
 

// CHANGE SETTINGS HERE

var SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1yJKx15H3LDbt17HCbTpo4euZLh-h6eD5u2y0TKmrvcQ/edit?usp=sharing";  //insert a new blank spreadsheet url between the quotes
var EMAIL = "okan@dgtlbase.com"; //insert your email adresses between the quotes


// NO CHANGES NEEDED BELOW THIS LINE

var SHEET_REPORT_HEADER = [
    "Campaign Name", 
    "AdGroup Name", 
    "AdID",
    "Ad Type",
    "Ad Status",
    "Disapproval Reason"
  ];


function main() {

  // first we clear the report sheet and add header
  prepareSpreadsheet();  
  
  // now let's check for disapprovals
  var disapprovedAds = getDisApprovedAds();    
  
  // finally, let's report on any issues
  if (disapprovedAds.length > 0) { // there is at least one issue
    Logger.log("Total NR of Ads Disapproved: "+disapprovedAds.length);
    reportResults(disapprovedAds);
  }  
}


function prepareSpreadsheet() {

  var ss = SpreadsheetApp.openByUrl(SPREADSHEET_URL);
  var sheet = ss.getActiveSheet();
  sheet.clear(); //remove earlies alerts
  sheet.clearConditionalFormatRules();
  sheet.appendRow(SHEET_REPORT_HEADER);
}


function getDisApprovedAds() {
  
  var accountName = AdsApp.currentAccount().getName();
  Logger.log("Checking account: "+accountName);
  
  var issues = [];
  
  var whereClause = "WHERE ad_group_ad.policy_summary.approval_status = 'DISAPPROVED' AND campaign.status = 'ENABLED' AND campaign.serving_status != 'ENDED' AND ad_group.status = 'ENABLED' AND ad_group_ad.status = 'ENABLED' AND segments.date DURING TODAY";
  
  var gaqlQuery = "SELECT campaign.name, ad_group.name, ad_group_ad.ad.id, ad_group_ad.ad.type, ad_group_ad.policy_summary.approval_status, ad_group_ad.policy_summary.policy_topic_entries FROM ad_group_ad "+whereClause;

  Logger.log("gaqlQuery: "+gaqlQuery);
  
  var results=AdsApp.search(gaqlQuery);   
  
  while (results.hasNext()) {
    
    var row=results.next() ;
    
    var campaignName = row.campaign.name;
    var adGroupName = row.adGroup.name;
    var adId = row.adGroupAd.ad.id;
    var adType = row.adGroupAd.ad.type;
    var approvalStatus = row.adGroupAd.policySummary.approvalStatus;
    var policyTopicEntries = row.adGroupAd.policySummary.policyTopicEntries;
    
    var policyFindings = "";
    
    if (policyTopicEntries.length > 0) {
      for (var i=0; i < policyTopicEntries.length; i++) {
        var policyTopic = policyTopicEntries[i].topic;
        if (policyFindings == "") {
          policyFindings = policyTopic;
        } else {
          policyFindings = policyFindings.concat(" , "+policyTopic);
        }
      }      
    }
    
    Logger.log("Campaign '%s', ad group '%s', ad_id '%s', issue: '%s'", campaignName, adGroupName, adId, policyFindings);

    issues.push([
      campaignName,
      adGroupName,
      adId,  
      adType,
      approvalStatus, 
      policyFindings
    ]);  
  } 
  return issues;

}


function reportResults(results) {

    var ss = SpreadsheetApp.openByUrl(SPREADSHEET_URL);
    var sheet = ss.getActiveSheet();
    var lastRow = sheet.getLastRow();

    // write issues to sheet
    var range = sheet.getRange(lastRow+1, 1, results.length, SHEET_REPORT_HEADER.length);
    range.setValues(results);

    // send the email
    var emailBody = 
      "Number of Ads Disapproved: " + results.length + "\n" + 
      "See details: "+ SPREADSHEET_URL + "\n\n" +
      "For more FREE Google Ads Scripts to improve your results and make your working day feel like a breeze, visit https://nilsrooijmans.com \n" + 
      "---\n" + 
      "This email is generated by a copy of the free Google Ads Script - Disapproved Ads Checker, (C) Nils Rooijmans \n" +
      "---\n";

    MailApp.sendEmail(EMAIL, "[GOOGLE ADS ALERT] - Disapproved Ads", emailBody);
}
